import time
import re
import os

import chromedriver_binary
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from tqdm import tqdm


# this statement to avoid error flake8(F401)
chromedriver_binary


def download_symantec_cves(path_cve_list, path_link_cache=None):
    """Get CVEs within the Symantec's AV/IPS signatures

        Extracts CVEs from Symantec Security Center.

        args:
            path_cve_list (str): file path to store cves
            path_link_cache (str); file path to cache urls.
                                   Defaults to `.symantec_url_cache.dat`
    """
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0;'
                         ' WOW64; Trident/7.0; rv:11.0) like Gecko')
    options.add_experimental_option

    browser = webdriver.Chrome(options=options)
    browser.set_page_load_timeout(10)
    browser.implicitly_wait(10)

    CVE_list = []
    if (os.path.exists(path_cve_list)):
        with open(path_cve_list, 'r') as f:
            CVE_list = [s.replace('\n', '') for s in f.readlines()]

    # symantec security-center/a-z
    URL = 'https://www.broadcom.com/support/security-center/a-z'
    browser.get(URL)
    time.sleep(10)
    xpath = '/html/body/div[1]/div[2]/div/div/div[1]/div/ul/li[5]/button'
    browser.find_element_by_xpath(xpath).click()
    time.sleep(5)
    html = browser.page_source
    matchObj = re.findall('CVE-[0-9]*-[0-9]*', html)
    if(len(matchObj) > 0):
        CVE_list = CVE_list + matchObj

    # symantec security-center/attacksignatures
    URL = 'https://www.broadcom.com/support/security-center/attacksignatures'

    browser.get(URL)
    time.sleep(10)
    html = browser.page_source
    href = browser.find_elements_by_tag_name("a")

    matchObj = re.findall('CVE-[0-9]*-[0-9]*', html)
    if(len(matchObj) > 0):
        CVE_list = CVE_list + matchObj

    if path_link_cache is None:
        path_link_cache = os.path.join(os.path.dirname(path_cve_list),
                                       '.symantec_url_cache.dat')

    link_cache = []
    if (os.path.exists(path_link_cache)):
        with open(path_link_cache, 'r') as f:
            link_cache = [s.replace('\n', '') for s in f.readlines()]

    links = []
    for i in href:
        link = i.get_attribute('href')
        if(len(link) > 0 and 'asid=' in link):
            links.append(link)

    links = list(set(links) - set(link_cache))

    for i in tqdm(links):
        if (i not in link_cache):
            try:
                browser.get(i)
                time.sleep(1)
                html = browser.page_source
                matchObj = re.findall('CVE-[0-9]*-[0-9]*', html)
                if(len(matchObj) > 0):
                    CVE_list = CVE_list + matchObj
                link_cache.append(i)
            except Exception:
                browser.quit()
                time.sleep(60)
                browser = webdriver.Chrome(options=options)
                browser.set_page_load_timeout(10)
                browser.implicitly_wait(10)
                browser.get(i)
                html = browser.page_source
                matchObj = re.findall('CVE-[0-9]*-[0-9]*', html)
                if(len(matchObj) > 0):
                    CVE_list = CVE_list + matchObj
                link_cache.append(i)

        CVE_list = list(set(CVE_list))

    with open(path_cve_list, 'w') as f:
        for i in CVE_list:
            f.write(i + '\n')

    with open(path_link_cache, 'w') as f:
        for i in link_cache:
            f.write(i + '\n')

    browser.quit()
