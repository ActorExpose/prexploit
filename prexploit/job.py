import datetime
import os

from dateutil.relativedelta import relativedelta

from .dataset import (build_dataset, load_exploit_cves,
                      load_cwe2data, extract_dataset)
from .model import (make_batchdata, build_model,
                    save_model, load_model,
                    write_predict_results)
from .data.nvd import download_nvd_history, download_modified_nvd
from .data.symantec import download_symantec_cves
from .util.git import squash_and_push


def train_model_and_predict_all(path_nvd, path_cwe, path_exp_cves,
                                path_model, path_out):
    download_nvd_history(path_nvd)
    download_modified_nvd(path_nvd)
    download_symantec_cves(path_exp_cves)

    rawdata = build_dataset(path_nvd, path_cwe)
    exploited_cves = load_exploit_cves(path_exp_cves)

    begin_date = '2016-01-01'
    end_date = datetime.datetime.now() - relativedelta(days=30)
    dataset = make_batchdata(rawdata, exploited_cves,
                             begin_date=begin_date, end_date=end_date)

    vectorizer, classifier = build_model(dataset)
    save_model(path_out, vectorizer, classifier)

    cves, x, y = dataset
    x = vectorizer.transform(x)
    explanations = classifier.batch_explain(x, vectorizer.get_feature_names())
    pred_y = classifier.predict_prob(x)
    write_predict_results(cves, pred_y, explanations, path_out)

    squash_and_push(path_out, f'update at {datetime.datetime.now()}')


def update_modified_cves(path_nvd, path_cwe, path_exp_cves,
                         path_model, path_out):
    download_modified_nvd(path_nvd)

    path_modified = os.path.join(path_nvd, 'nvdcve-1.1-modified.json.zip')
    cwe2data = load_cwe2data(path_cwe)
    rawdata = extract_dataset(path_modified, cwe2data)

    exploited_cves = load_exploit_cves(path_exp_cves)
    dataset = make_batchdata(rawdata, exploited_cves,
                             begin_date='2016-01-01')

    path_model = path_model.rstrip('/') + '.zip'
    vectorizer, classifier = load_model(path_model)

    cves, x, y = dataset
    x = vectorizer.transform(x)
    explanations = classifier.batch_explain(x, vectorizer.get_feature_names())
    pred_y = classifier.predict_prob(x)
    write_predict_results(cves, pred_y, explanations, path_out)

    squash_and_push(path_out, f'update at {datetime.datetime.now()}')
