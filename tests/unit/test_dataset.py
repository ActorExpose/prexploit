import unittest

from prexploit.dataset import _CPE, _list_cpes, load_cwe2data


class TestDataset(unittest.TestCase):
    def test_cpe(self):
        testcases = [
            ('cpe:2.3:o:google:android:8.0:*:*:*:*:*:*:*',
             'o', 'google', 'android')
        ]
        for cpe, ptype, vendor, product in testcases:
            self.assertEqual(_CPE(cpe).type, ptype)
            self.assertEqual(_CPE(cpe).vendor, vendor)
            self.assertEqual(_CPE(cpe).product, product)

    def test_list_cpes(self):
        # cited from CVE-2020-0001
        nodes = [
            {
                "operator": "OR",
                "cpe_match": [
                    {"vulnerable": True,
                     "cpe23Uri": "cpe:2.3:o:google:android:8.0:*:*:*:*:*:*:*"},
                    {"vulnerable": True,
                     "cpe23Uri": "cpe:2.3:o:google:android:8.1:*:*:*:*:*:*:*"},
                    {"vulnerable": True,
                     "cpe23Uri": "cpe:2.3:o:google:android:9.0:*:*:*:*:*:*:*"},
                    {"vulnerable": True,
                     "cpe23Uri": "cpe:2.3:o:google:android:10.0:*:*:*:*:*:*:*"}
                ]
            }
        ]
        testcases = [
            (nodes, ["cpe:2.3:o:google:android:8.0:*:*:*:*:*:*:*",
                     "cpe:2.3:o:google:android:8.1:*:*:*:*:*:*:*",
                     "cpe:2.3:o:google:android:9.0:*:*:*:*:*:*:*",
                     "cpe:2.3:o:google:android:10.0:*:*:*:*:*:*:*"
                     ])
        ]

        for cpe, expect in testcases:
            cpes = _list_cpes(cpe)
            self.assertEqual(set(cpes), set(expect))

    def test_load_cwes(self):
        path_cwe = "./tests/fixtures/rawdata/cwe.json"

        cwe2data = load_cwe2data(path_cwe)
        for data in cwe2data.values():
            self.assertNotEqual(len(data['Phrases']), 0)


if __name__ == '__main__':
    unittest.main()
