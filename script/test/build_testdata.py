import json
import os
import glob
import zipfile
import collections
import random
import copy
import argparse


def load_exploit_cves(path_exp_sym):
    with open(os.path.join(path_exp_sym), 'r', encoding='utf-8') as fd:
        exploited_cves = set([row.strip() for row in fd.read().split('\n')
                              if row.strip() != ''])
    return exploited_cves


def get_sampled_items(items, exploit_cves, n_sample):
    month2exploited = collections.defaultdict(set)
    month2unexploited = collections.defaultdict(set)

    for i, item in enumerate(items):
        cve = item['cve']['CVE_data_meta']['ID']
        year = cve[4:8]
        pub_date = item['publishedDate']
        if not pub_date.startswith(year):
            continue
        month = pub_date[:7]
        if cve in exploit_cves:
            month2exploited[month].add(i)
        else:
            month2unexploited[month].add(i)

    min_n_pos = min([len(n) for n in month2exploited.values()])
    n_month = len(set(month2unexploited.keys()))
    n_per_month = int(n_sample / n_month)
    n_pos_per_month = int(n_per_month / 2)
    n_neg_per_month = n_per_month - n_pos_per_month

    if min_n_pos < n_neg_per_month:
        raise Exception(
            f'min_n_pos={min_n_pos}, but n_neg_per_month={n_neg_per_month}')

    indexes = set()
    for m in month2exploited.keys():
        indexes.update(random.sample(month2exploited[m], n_pos_per_month))
        indexes.update(random.sample(month2unexploited[m], n_neg_per_month))

    items = [item
             for i, item in enumerate(items)
             if i in indexes]

    cves = [item['cve']['CVE_data_meta']['ID']
            for item in items]
    exploited_cves = set(cves) & exploit_cves
    return items, exploited_cves


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("path_nvd")
    parser.add_argument("path_sym")
    parser.add_argument("path_out")
    args = parser.parse_args()

    target_files = set([
        'nvdcve-1.1-2016.json.zip',
        'nvdcve-1.1-2017.json.zip'
    ])

    exploit_cves = load_exploit_cves(args.path_sym)
    nvd_files = glob.glob(os.path.join(args.path_nvd, '*.json.zip'))
    bundle = None
    sampled_exploited_cves = set()
    for nvd_file in nvd_files:
        if os.path.basename(nvd_file) not in target_files:
            continue
        filename = os.path.basename(nvd_file)[:-4]
        with zipfile.ZipFile(nvd_file) as zf:
            with zf.open(filename, 'r') as fd:
                _bundle = json.load(fd)
                if bundle is None:
                    bundle = copy.copy(_bundle)
                else:
                    bundle['CVE_Items'].extend(_bundle['CVE_Items'])

    _items = bundle['CVE_Items']
    items, sampled_exploited_cves =\
        get_sampled_items(_items, exploit_cves, 300)
    bundle['CVE_Items'] = items

    if not os.path.exists(os.path.join(args.path_out, 'nvd')):
        os.mkdir(os.path.join(args.path_out, 'nvd'))
    path_nvd = os.path.join(args.path_out, 'nvd/nvd_testdata.json')
    path_nvd_zip = os.path.join(args.path_out, 'nvd/nvd_testdata.json.zip')
    path_exploited_cves = os.path.join(args.path_out, 'exploited_cves.txt')
    with open(path_nvd, 'w') as fd:
        json.dump(bundle, fd, indent=4)
    with zipfile.ZipFile(path_nvd_zip,
                         'w',
                         compression=zipfile.ZIP_DEFLATED) as fz:
        fz.write(path_nvd, arcname=os.path.basename(path_nvd))
    os.remove(path_nvd)

    with open(path_exploited_cves, 'w') as fd:
        fd.write('\n'.join(list(sampled_exploited_cves)))


if __name__ == '__main__':
    main()
